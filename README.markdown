# Blockchain Program README

## Overview

This program implements a simple blockchain system with wallet functionality, transaction creation, and block management. It allows users to:

- Create and manage a wallet with public/private key pairs.
- Create, sign, and verify transactions.
- Add transactions to blocks and store them in a blockchain.
- Check wallet balances by scanning the blockchain.

The system consists of three main Python files:

1. **block.py**: Handles block creation, transaction inclusion, and block storage.
2. **transaction.py**: Manages transaction creation, signing, and validation.
3. **wallet.py**: Manages wallet creation, balance checking, and transaction signing.

## Requirements

To run this program, you need:

- **Python 3.7+**
- **Required Python packages**:
  - `cryptography` (for cryptographic operations like signing and verification)

You can install the required package using:

```bash
pip install cryptography
```

- **Operating System**: Compatible with Windows, macOS, or Linux.
- **Storage**: Ensure the system has write permissions to create directories (`pending_transactions`, `blocks`, `processed_blocks`, `pending_transactions/processed`) and files (`wallet.pem`).

## Folder Creation

The program automatically creates the following directories if they do not exist:

- `pending_transactions/`: Stores pending transaction JSON files created by `transaction.py` or `wallet.py`.
- `blocks/`: Stores block JSON files generated by `block.py`.
- `processed_blocks/`: Used for balance calculations in `wallet.py`. You may need to manually move block files here for accurate balance checks.
- `pending_transactions/processed/`: Stores transaction JSON files after they are processed into a block by `block.py`.

Additionally, a `wallet.pem` file is created in the working directory to store the wallet's private key.

## How to Run

1. **Prepare the Environment**:

   - Ensure Python 3.7+ is installed.
   - Install the `cryptography` package using the command above.
   - Place the three Python files (`block.py`, `transaction.py`, `wallet.py`) in the same directory.

2. **Run the Wallet Program**:

   - The main entry point is `wallet.py`, which provides an interactive menu for wallet operations.

   - Execute the following command in the directory containing the files:

     ```bash
     python wallet.py
     ```

   - This will:

     - Create or load a wallet (stored in `wallet.pem`).
     - Create the `pending_transactions` folder if it doesn't exist.
     - Display the wallet address.
     - Present a menu with options to:
       1. Check your wallet balance.
       2. Send a transaction to another wallet (saves transaction to `pending_transactions/`).
       3. Check another wallet's balance (note: currently uses the same blockchain scan, so it may not reflect other wallets accurately).
       4. Exit the program.

3. **Create Transactions**:

   - Run `transaction.py` to manually create transactions via user input:

     ```bash
     python transaction.py
     ```

   - This will:

     - Create the `pending_transactions` folder if it doesn't exist.
     - Prompt for the sender's address, recipient's address, and amount.
     - Save the transaction as a JSON file in the `pending_transactions` folder.

4. **Process Transactions into Blocks**:

   - Run `block.py` to process pending transactions into a new block:

     ```bash
     python block.py
     ```

   - This will:

     - Create the `blocks` and `pending_transactions/processed` folders if they don't exist.
     - Read transactions from `pending_transactions`.
     - Create a new block with the transactions.
     - Save the block as a JSON file in the `blocks` folder.
     - Move processed transactions to `pending_transactions/processed`.

## Notes

- **Security**: The wallet's private key is stored in `wallet.pem`. Keep this file secure, as it contains sensitive cryptographic data.
- **Balance Calculation**: The balance is calculated by scanning the `processed_blocks` folder. Ensure block files are moved to this folder for accurate balance checks.
- **Transaction Validation**: Transactions are signed and verified using RSA and SHA256. Ensure valid public/private key pairs are used.
- **Limitations**:
  - The program does not currently support network communication or consensus mechanisms.
  - The `verify_transaction` and `validate_transactions` methods in `block.py` are incomplete and not fully integrated.
  - Balance checking for other wallets in `wallet.py` may not work as expected due to reliance on the same blockchain scan.

## Example Workflow

1. Run `python wallet.py` to create a wallet and note the address. This creates the `pending_transactions` folder.
2. Run `python transaction.py` to create a transaction, specifying the wallet address as the sender. This saves the transaction in `pending_transactions`.
3. Run `python block.py` to process the transaction into a block. This creates the `blocks` and `pending_transactions/processed` folders.
4. Move the block file from `blocks/` to `processed_blocks/` for balance calculations. Create the `processed_blocks` folder manually if needed.
5. Use `wallet.py` to check the wallet balance.